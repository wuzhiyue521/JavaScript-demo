/**
 * 1. 第一章: 概述
 */

/**
 * 1. js 的四大块: 基础知识 / js api / 开发环境 / 运行环境
 *
 * 1. 基础知识:
 *    1. 原型 - 原型链
 *    2. 作用域 - 闭包
 *    3. 异步 - 单线程
 *
 * 2. js api
 *    1. dom 操作
 *    2. ajax
 *    3. 事件绑定
 *
 * 3. 开发环境:
 *    1. 版本管理
 *    2. 模块化
 *    3. 打包工具
 *
 * 3. 运行环境:
 *    1. 页面渲染
 *    2. 性能优化
 *    3. 前端安全性能
 */


/**
 * 2. 知识点:
 *
 * 1. b-chapter (变量类型 / 变量计算)
 *    1. 变量类型
 *    2. typeof (数据类型) 运算符详解
 *    3. 变量计算 - 强制类型转化
 *    4. JS 中有的内置函数
 *    5. 构造函数
 *    6. 构造函数 - 扩展
 *    7. 构造函数中的 this
 *    8. 原型 (规则和示例)
 *    9. 原型链
 *    10. 循环
 *    11. instanceof
 *
 * 2. c-chapter(作用域 / 闭包)
 *    1. 执行上下文
 *    2. 变量提升
 *    3. this
 *    4. 作用域
 *        1. JS 无块级作用域
 *        2. 全局作用域和函数作用域
 *    5. 作用域链
 *        1. 自由变量
 *    6. es6 中是有块级作用域的
 *    7. 闭包
 *
 * 3. d-chapter (异步 / 单线程)
 *    1. 什么是异步
 *    2. 什么是同步
 *    3. 何时需要异步
 *    4. 前端使用 异步 的场景
 *    5. 单线程
 *    6. setTimeout / ajax / 事件 来说明单线程和异步
 *    7. 单线程和异步的关系
 * 3. d-chapter (日期 / math / 数组 / 对象)
 *    1. 日期
 *    2. math
 *    3. 数组 API
 *    4. 对象 API
 *
 * 4. e-chapter
 *    1. 常说的 js (浏览器执行的 js)包含两个部分
 *    2. DOM 的本质是什么
 *    3. 获取 DOM 节点
 *    4. prototype
 *    5. Attribute
 *    6. 新增节点 (新增一个子节点)。
 *    7. 获取父元素(父节点)。
 *    8. 获取子元素(子节点)。
 *    9. 删除节点
 *    10. 补充: 递归 。
 *    11. navigator -> 浏览器
 *    12. screen -> 屏幕(屏幕的宽高)
 *    13. location -> 地址(获取地址栏的一些信息)
 *    14. history -> 历史(前进后退)
 *
 * 5. f-chapter  (事件/ ajax) -- 事件
 *    1. 简单的通用事件绑定封装
 *    2. 完善的通用事件绑定
 *    3. 阻止默认行为
 *    4. 关于 IE 低版本的兼容性
 *    5. 事件冒泡
 *    6. 阻止冒泡
 *    7. 事件捕获
 *    8. 事件触发的顺序
 *    9. 代理
 *        1. 代理的好处
 *    10. 搜索自动提示功能 JS 优化
 * 5. f-chapter  (事件/ ajax) -- Ajax
 *    11. open(method, url, async)
 *    12. send()
 *    13. onreadystatechange
 *    14. readyState
 *    15. status
 *    16. responseText
 *    17. setRequestHeader()
 *    18. 状态码
 * 5. f-chapter  (事件/ ajax) -- 跨域
 *    19. 什么是跨域
 *    20. 同域的概念
 *    21. 同源策略
 *    22. 跨域的条件
 *    23. 可以跨域的 3 个标签
 *    24. 跨域的注意事项
 *    25. JSONP
 *    26. JSONP 的实现原理
 * 5. f-chapter  (事件/ ajax) -- 存储
 *    27. 描述 cookie , sessionStorage , localStorage
 *
 * 6. g-chapter (开发环境) -- 开发环境包含什么
 *    1. IDE (IDE 代码编辑器, 使用什么软件去编写代码, 即编写代码的工具)写代码的效率
 *       1. 常用 IDE
 *       2. 不做不用的 IDE
 *    2. git (代码版本管理, 多人协作开发)
 *       1. git 的了解 。
 *       1. 常用的 git 命令:
 *    3. JS 模块化 (实际开发中是如何分模块的, 是通过什么技术组装起来的)
 *       1. CommonJS
 *       2. AMD
 *       3. CMD
 *    4. 打包工具 (代码是通过什么来打包的 ？ 现在前端已经到了一个工程化的阶段)
 *       1. 构建工具 fis
 *       2. webpack
 *    5. 上线回滚的流程
 *       1. 上线流程要点
 *       2. 回滚流程要点
 *       3. linux 基本命令
 *
 * 7. h-chapter (运行环境)
 *    1. 页面的加载过程
 *       1. 加载资源的形式
 *       2. 加载资源的过程是什么
 *       3. 浏览器渲染页面的过程是什么
 *       4. DOM Tree 与 RenderTree 的区别是
 *    2. 性能优化
 *       1. 静态资源的压缩合并
 *       2. 静态资源的缓存
 *       3. 使用 CDN 让资源加载更快
 *       4. 使用 SRR 后端渲染, 数据直接输出到 HTML 中
 *       5. 页面渲染优化
 *       6. 懒加载 (图片懒加载 、 下拉加载更多)
 *       7. 减少 DOM 查询, 对 DOM 查询做缓存
 *       8. 减少 DOM 操作, 多个操作尽量合并在一起
 *       9. 事件节流
 *       10. 尽早执行操作
 *           1. window.onload 和 DMOContentLoaded 的区别
 *    3. 安全性
 *       1. XSS 跨站请求攻击
 *          1. 举例说明
 *          2. 基本原理
 *          3. 预防方法
 *       2. XSRF 跨站请求伪造
 *          1. 举例说明
 *          2. 预防方法
 */